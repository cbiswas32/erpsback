CREATE TABLE grn_master (
    grn_id SERIAL PRIMARY KEY,
    po_id INT REFERENCES purchase_order(po_id),
    vendor_id INT REFERENCES vendor_master(vendor_id),
    location_id INT REFERENCES location_master(location_id),  -- Location where goods are received
    grn_number VARCHAR(100) UNIQUE NOT NULL,
    grn_date DATE NOT NULL,
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by INT
);

CREATE TABLE grn_item (
    grn_item_id SERIAL PRIMARY KEY,
    grn_id INTEGER NOT NULL REFERENCES grn_master(grn_id) ON DELETE CASCADE,
    po_item_id INTEGER NOT NULL REFERENCES purchase_order_item(po_item_id) ON DELETE CASCADE,
    product_id INTEGER NOT NULL REFERENCES product_master(product_id) ON DELETE RESTRICT,

    quantity_received NUMERIC(12, 2) NOT NULL,
    unit_price NUMERIC(12, 2) NOT NULL, -- Pre-tax price

    cgst_percent NUMERIC(5, 2),
    sgst_percent NUMERIC(5, 2),
    igst_percent NUMERIC(5, 2),

    cgst_amount NUMERIC(12, 2) DEFAULT 0.00,
    sgst_amount NUMERIC(12, 2) DEFAULT 0.00,
    igst_amount NUMERIC(12, 2) DEFAULT 0.00,

    total_amount NUMERIC(12, 2) NOT NULL, -- quantity_received * unit_price + total tax

    batch_number VARCHAR(100), -- Optional: for tracking
    uom TEXT, -- Optional: for tracking
    expiry_date DATE,          -- Optional: for perishable products

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



CREATE TABLE inventory_issue (
    issue_id SERIAL PRIMARY KEY,
    issue_number VARCHAR(100) UNIQUE NOT NULL,
    issue_date DATE NOT NULL,
    location_id INT NOT NULL REFERENCES location_master(location_id),
    issued_to VARCHAR(150),  -- Could be employee/department/customer
    remarks TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE inventory_issue_item (
    issue_item_id SERIAL PRIMARY KEY,
    issue_id INT NOT NULL REFERENCES inventory_issue(issue_id) ON DELETE CASCADE,
    product_id INT NOT NULL REFERENCES product_master(product_id),
    location_id INT NOT NULL REFERENCES location_master(location_id),
    quantity_issued NUMERIC(12,2) NOT NULL,
    created_by INT REFERENCES users(user_id)
);


CREATE TABLE inventory_transfer (
    transfer_id SERIAL PRIMARY KEY,
    transfer_number VARCHAR(100) UNIQUE NOT NULL,
    transfer_date DATE NOT NULL,
    product_id INT NOT NULL REFERENCES product_master(product_id),
    from_location_id INT NOT NULL REFERENCES location_master(location_id),
    to_location_id INT NOT NULL REFERENCES location_master(location_id),
    quantity NUMERIC(12,2) NOT NULL CHECK (quantity > 0),
    remarks TEXT
);


CREATE TABLE inventory_adjustment (
    adjustment_id SERIAL PRIMARY KEY,
    product_id INT NOT NULL REFERENCES product_master(product_id),
    location_id INT NOT NULL REFERENCES location_master(location_id),
    adjustment_date DATE NOT NULL,
    quantity_change NUMERIC(12,2),  -- Positive or Negative
    reason TEXT,
    adjusted_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE inventory_stock (
  product_id INT,
  location_id INT,
  quantity NUMERIC(12,2),
  last_update_ref TEXT,
  PRIMARY KEY (product_id, location_id)
);


CREATE TABLE product_serials (
  serial_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  product_id UUID NOT NULL REFERENCES product_master(product_id),
  location_id INT NOT NULL REFERENCES location_master(location_id);
  serial_number TEXT NOT NULL UNIQUE,
  status TEXT NOT NULL CHECK (status IN (
    'in_stock',
    'issued',
    'out_of_stock',
    'damaged',
    'returned',
    'reserved'
  )),
  modified_by INT, 
  added_date TIMESTAMP DEFAULT NOW(),
  last_updated TIMESTAMP DEFAULT NOW()
);
